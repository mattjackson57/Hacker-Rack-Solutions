# Connected cell in a grid

https://www.hackerrank.com/challenges/connected-cell-in-a-grid

import java.io.*;
import java.util.*;

public class Solution {
    
static int cols;
static int rows;
static Scanner in;  
static int result;
static int[] array;
static Set<Integer> used;
    
    public static void main(String[] args) {
        in = new Scanner(System.in);
        rows = in.nextInt();
        in.nextLine();
        cols = in.nextInt();
        in.nextLine();
        array = makeArray();
        used = new HashSet<>();
        int size = 0;
        
        for (int i = 0; i < rows * cols; i++)
            {
            if (array[i] == 1 && !(used.contains(i)))
                {
                used.add(i);
                size = sizeOfRegion(i);
                if (size > result)
                    {
                    result = size;
                }
            } 
        }
        System.out.print(result);
    }
    
    public static int sizeOfRegion(int i){
        Queue<Integer> connected = new LinkedList<>();
        Queue<Integer> q = new LinkedList<>();
        q.add(i);
        connected.add(i);
        int[] connectedPositions = {(-cols -1),(-cols),(-cols +1),
                                    -1, 1, (cols -1),(cols ),(cols + 1)};
        while (q.peek() != null)
            {
            int j = q.poll();
            for (int position : connectedPositions)
                {
                int adjacentPosition = j + position;
                boolean crossesEdge = ((j % cols) > ((adjacentPosition) % cols + 1)) ||
                                        ((j % cols) < ((adjacentPosition) % cols - 1));
                boolean withinArray = ((adjacentPosition) < (cols * rows)) && (adjacentPosition >= 0);
                if ( withinArray && !crossesEdge)
                    {
                    boolean alreadyCounted = (connected.contains(adjacentPosition));
                    if (array[adjacentPosition] == 1 && !alreadyCounted )
                        {
                        q.add(adjacentPosition);
                        connected.add(adjacentPosition);
                        used.add(adjacentPosition);
                    }
                }
            }
        }
        return connected.size();
            
    }
    
    public static int[] makeArray(){
        int[] array = new int[rows * cols];
        for (int i = 0; i < rows * cols; i++)
            {
            int next = in.nextInt();
            array[i] = next;   
        }
        return array;
    }
}
